// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"
)

// BatchOptionsApplyConfiguration represents an declarative configuration of the BatchOptions type for use
// with apply.
type BatchOptionsApplyConfiguration struct {
	BatchMode  *string        `json:"mode,omitempty"`
	BatchSize  *int           `json:"size,omitempty"`
	WindowSize *time.Duration `json:"window,omitempty"`
}

// BatchOptionsApplyConfiguration constructs an declarative configuration of the BatchOptions type for use with
// apply.
func BatchOptions() *BatchOptionsApplyConfiguration {
	return &BatchOptionsApplyConfiguration{}
}

// WithBatchMode sets the BatchMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchMode field is set to the value of the last call.
func (b *BatchOptionsApplyConfiguration) WithBatchMode(value string) *BatchOptionsApplyConfiguration {
	b.BatchMode = &value
	return b
}

// WithBatchSize sets the BatchSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchSize field is set to the value of the last call.
func (b *BatchOptionsApplyConfiguration) WithBatchSize(value int) *BatchOptionsApplyConfiguration {
	b.BatchSize = &value
	return b
}

// WithWindowSize sets the WindowSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WindowSize field is set to the value of the last call.
func (b *BatchOptionsApplyConfiguration) WithWindowSize(value time.Duration) *BatchOptionsApplyConfiguration {
	b.WindowSize = &value
	return b
}
