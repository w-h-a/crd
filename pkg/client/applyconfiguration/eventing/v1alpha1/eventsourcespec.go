// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// EventSourceSpecApplyConfiguration represents an declarative configuration of the EventSourceSpec type for use
// with apply.
type EventSourceSpecApplyConfiguration struct {
	Type           *string                          `json:"type,omitempty"`
	ConnectionInfo map[string]string                `json:"connectionInfo,omitempty"`
	SenderOptions  *SenderOptionsApplyConfiguration `json:"senderOptions,omitempty"`
}

// EventSourceSpecApplyConfiguration constructs an declarative configuration of the EventSourceSpec type for use with
// apply.
func EventSourceSpec() *EventSourceSpecApplyConfiguration {
	return &EventSourceSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *EventSourceSpecApplyConfiguration) WithType(value string) *EventSourceSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithConnectionInfo puts the entries into the ConnectionInfo field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ConnectionInfo field,
// overwriting an existing map entries in ConnectionInfo field with the same key.
func (b *EventSourceSpecApplyConfiguration) WithConnectionInfo(entries map[string]string) *EventSourceSpecApplyConfiguration {
	if b.ConnectionInfo == nil && len(entries) > 0 {
		b.ConnectionInfo = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ConnectionInfo[k] = v
	}
	return b
}

// WithSenderOptions sets the SenderOptions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SenderOptions field is set to the value of the last call.
func (b *EventSourceSpecApplyConfiguration) WithSenderOptions(value *SenderOptionsApplyConfiguration) *EventSourceSpecApplyConfiguration {
	b.SenderOptions = value
	return b
}
