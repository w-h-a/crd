// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/w-h-a/crd/pkg/apis/configuration/v1alpha1"
	eventingv1alpha1 "github.com/w-h-a/crd/pkg/apis/eventing/v1alpha1"
	configurationv1alpha1 "github.com/w-h-a/crd/pkg/client/applyconfiguration/configuration/v1alpha1"
	applyconfigurationeventingv1alpha1 "github.com/w-h-a/crd/pkg/client/applyconfiguration/eventing/v1alpha1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=configuration.actions.xyz, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("Configuration"):
		return &configurationv1alpha1.ConfigurationApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ConfigurationSpec"):
		return &configurationv1alpha1.ConfigurationSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("TracingSpec"):
		return &configurationv1alpha1.TracingSpecApplyConfiguration{}

		// Group=eventing.actions.xyz, Version=v1alpha1
	case eventingv1alpha1.SchemeGroupVersion.WithKind("BatchOptions"):
		return &applyconfigurationeventingv1alpha1.BatchOptionsApplyConfiguration{}
	case eventingv1alpha1.SchemeGroupVersion.WithKind("DedupOptions"):
		return &applyconfigurationeventingv1alpha1.DedupOptionsApplyConfiguration{}
	case eventingv1alpha1.SchemeGroupVersion.WithKind("EventSource"):
		return &applyconfigurationeventingv1alpha1.EventSourceApplyConfiguration{}
	case eventingv1alpha1.SchemeGroupVersion.WithKind("EventSourceSpec"):
		return &applyconfigurationeventingv1alpha1.EventSourceSpecApplyConfiguration{}
	case eventingv1alpha1.SchemeGroupVersion.WithKind("SenderOptions"):
		return &applyconfigurationeventingv1alpha1.SenderOptionsApplyConfiguration{}

	}
	return nil
}
